#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esg-dn1.nsc.liu.se - 2016/11/30 09:43:12
# Search URL: https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.AFR-44i.SMHI.CNRM-CERFACS-CNRM-CM5.rcp45.r1i1p1.RCA4.v1.mon.pr.v20130927|esg-dn1.nsc.liu.se
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.AFR-44i.SMHI.CNRM-CERFACS-CNRM-CM5.rcp45.r1i1p1.RCA4.v1.mon.pr.v20130927|esg-dn1.nsc.liu.se'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum

'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' 'fed3793337a6b6d3007229411a80f471710ba76029011000336160b94316ab5c'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '7343babc75bb5be28c7c8663dda4f0541395538467dc6343875ee86dc9e41678'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '9d8ec66ea2a0b327e1f9933c8a22a4a16e3ce436065794a1b0354470a8f9512c'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'd46958184f1fbcd000ac8db2ea77c847b17f9ed27ee42e53e041dcc7b391274d'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'dc5011873cad55412c4887d80e5c7c86aa013ff3beb5a7dfd0a81ff425576989'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'f33893627d5b890488ed1d1d473d2ce5524f1291b1056bff9c528b0e20667977'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '2202308cc46ad4f71a76f4d89ec56d0e893050734548fbdb683ddb4f82feecdb'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '429f02a3498ec0b309199ac3a1ec9eee3111e476d4f3161827ff0d3a8f750123'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' 'e48c09e4c3f80f3870bb889018da3c15449619bbf0382a9fa4121232ff289471'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20141024/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '12f9310b994cb7bdc2a3fa91b374b21c1be0d28b60e77a8c6f9b78568325161f'

'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '42e49cceeb807766db3325c6046e762b3a16a46091ad477771dc7474fb0376f5'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'da997782f01b5fbe7a70854223d5531cef5df35dbf9d133ffcfa53aca5e793ee'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '14281329e10cd1ffb641e8810ebe1aa6b34d909e0a43602f1d62053eda25a418'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '81803e771bcd262e4ca38bab2b9d887627901575acd9fd56bc1698ddb764ce76'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '55ab602952e6a03208b3fe287efb9b1b72c6d0452442bd69a6be458c886d8945'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '7a6f7f59b5c4fe014b10b80b029e07a4d56df82f901c1a0fb2a513cbd7f5f395'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '6e4c38d855432e4addaa97b3b53c0e1ffcba61f4d74c437e8c4454aa7339240d'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'd022e0f6c82aac9537018a9be25ec206ea607f98689f65f24c9d625b7cfce236'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '56421079eae8eef5a6f15f2bb8d79e4c079eec3940a4f7b12588b7aefb9d2ea3'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20141024/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '61cf3b45bd08dc466d678be523dcc3eb7a2e73a17ce396f6d8490df8d0063bb6'

'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '8f2076b697e73e022be86dc72f8d32359216726c46304fe791e22495aca0306f'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '14172900e73558942e0f1c02de25c6b201e38f999618574d506454ef29ebdf1b'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '9f8d9053ab173d4ec5bec3c02a802d574a5b64f5f1fa592d65fca8058831299f'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'f667974bdaa093567409956ad6ae12faf0bde04ffc11ac2377f2a0e2d144e1db'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '7f12bfdab9b0a692c44252c45afc9c541fb3d8f562ebaf4c4c5c8cd9c2306f94'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' 'db0acada58ede6e28b2328170beec14e8aefc6ebc38549c513816215b0051ad3'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' 'c97bed9917c72f06c6731d158dc37c7e2d2cebb74521d8e9a86ee3c0a13a5781'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'baa69f6a2cb43999cd9317fa44960fe4f21443fc833a5e3d8ee28d16b136585d'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '2959428c91d68ee40ef004209e1d88a875f5fb43e5b1e8ea7f94eef4fc177ccb'
'tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '191671760fa436aef443fdeda303d2b9c9dc31d875de8882c2336ebfb8796c50'

'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'c77fb4375cbcce53cfdce0c754553c902dfecdca0978c9f4eac325dee4405d82'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '7e5658a3a88850219444858e09d95082fdcfc3533f701757bd7d4f39fe9800fa'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '028b0266f7402684b798384b126cce882a6d56dac14fc8828d31f747b0933c72'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '2a091ba02771c42d760ce8055c68c126a8fa6e2e8800d6aa6bd9342ff44ddf02'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '112714d473f2cfb53fb755c7cab06914dec50c0f70b69562983c53a09180ac54'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '600c134f07d98a47e62e24ba92e1484cc6538881b904d44bc4e71734175eaccd'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'bfcd11aaa9935a437312eb0f035e8c7609702c4a3e23834552f60ae8a5fd2583'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '87e960ccc3420ba57d4c7f0ec07f3badd755d77324eef1c4bc3ec784bcfe1526'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' 'f4f7265f2b7f219e8a6e7763c5c3f61650bbda06fd48113fc3e27cdeb979f954'
'pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/IPSL-IPSL-CM5A-MR/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_IPSL-IPSL-CM5A-MR_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'ebe42fab276ae464c594beb02ac9643d31f8dded6f62443f810e9d001a7d7d09'

'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_207101-208012.nc' 'SHA256' 'b9f9ed881e6196c3270fbc9fc0b5e1ec9d37c4708af1d8241a5629e63f6abaa4'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_200601-201012.nc' 'SHA256' '7152552a196ff6f03b5af080945da39893eca95f7e188a3c371fad8eed4c8e1b'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_206101-207012.nc' 'SHA256' 'bbf272d8bb2777c6e7505435321638cd4328a2a06f4a94d103fb8f8d48aa7bac'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_205101-206012.nc' 'SHA256' 'a4d247334478f372b17fcabb2c3f598532427379bad807c42b8101a31e350d80'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_204101-205012.nc' 'SHA256' 'a09e009f8856a77f60ea12faae836bbfa5a6b9dae29e0089689cfcda4207e5cd'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_203101-204012.nc' 'SHA256' '74b662d534a300a9c08bc05deb2beb2cf65e837706b3b2fe6d5197d36b348ef2'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_202101-203012.nc' 'SHA256' 'cda178718efb7e8870816b894d121382e345291852b637d33a7dec0c954eb912'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_201101-202012.nc' 'SHA256' 'ed800fedef0c9147de27b119a46e022381ebf6611eb68ccadbfa749e82fd4391'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_209101-210012.nc' 'SHA256' 'a759c68e5a79fd160f44d88c65e447cd273a22118afa33835881ab6d32717298'
'tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/tas/v20150521/tas_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_208101-209012.nc' 'SHA256' 'fcd2780a569d9285ddaf3d506aa0c8ef359ee25f80395d4bbee13e840db3404c'

'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_207101-208012.nc' 'SHA256' 'a6f192206c5501daa7531361d6af5e63ceb56113dfb1019c5c95c0536e064585'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_206101-207012.nc' 'SHA256' 'c557730df4fb771145dd8799f03149059e4e36bbc09041f5eb5f4fb5290eca97'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_205101-206012.nc' 'SHA256' 'c1644a1095e257b315ac36050882cc6e56f351054a0be0bc01d4e94e1cebad91'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_204101-205012.nc' 'SHA256' '146c1c6e8aabd2c93b5e947337821773c53501586e553fcd8309331c2f4719f9'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_203101-204012.nc' 'SHA256' 'db69eced9e2e53e67105973362ea41fb190faa5ff7f10266580b65e617ef9c15'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_202101-203012.nc' 'SHA256' '25dda00252d7d097e6de5fd071acbb8194ea78fb67ee570c1758d5087c6a2d71'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_201101-202012.nc' 'SHA256' 'be2455c29abaec96a56a298c0dbb27a71fd54efb92d4a459e5874f167b30ef75'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_200601-201012.nc' 'SHA256' '2da816e094bd1ef6ae1c8abf60a825ab757419e63e475bd3354c3bca39dc942a'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_209101-210012.nc' 'SHA256' '85d88f009f912b45d021064df8ba46858cf8c5fb84f27455813c944782aa9f85'
'pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot3/cordexdata/cordex/output/WAS-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v2/mon/pr/v20150521/pr_WAS-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v2_mon_208101-209012.nc' 'SHA256' '97f933bc48acadb2c54bd8f5c9348fdaba2f0cd595bc9c499307aef7d95d9573'

'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'fc9cffb46c4d53ef4689c00c08cca1a2719d30913a44e11a9e0ef9f616c3d739'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'e3a2f111ce57c0c5a36cd5519d65fc199e4722866c667d517215038c52cc7a79'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '316b88e4ff6e20cb808134ee3ba9f62787c559cad9df0f29ed52cd7ab3c0a602'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' 'bcf61f6ae6efdb7762b091f22e8c542eb2746905b9770abe465dd5604ccdc942'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '20d29eafe15445448fc3bb8780e0d30ee58613f14dca522405160ba4557d6825'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '1e3320574301f133b3c57ad3423165c47347b210552ad58610b2206ce12257e0'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' 'acbab39f843665b3a0abd80b88c8d947a9cbc60d07354ebd72224a7620e7379e'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '8a4d96079074def27c405b1cff260cf5edce62d7a7b6d485bf8e7e67b3d67595'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'b79d46de7bb24e117121ca083af7395f9fa53f6c8b5c3a44af1741b14ad2d3b2'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '41e3384ab985b053abd65d93f8f347bd34839801d38296e3b2ab561bad8c5171'

'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '94ecdf7dc627a76d0a791ef03bd027e52d78b90391574e1b40d9e68d4c8b6528'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '4c23bfb5aa354f03b8761cde2f6544a58d5bf18a16b31b889c4f9f32d4446ea9'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'd2f3b177cc58000fd523d29dcf09dd1b8c30a5d389bd40ae096037ef6e4528c3'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'ac49c962851022af2de1e443fd839063947962a1c51fb8f1ba7f36ec1bbf376e'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '755dcd844e930f0d3300edcecc4e6ff0a10dc1964be51f3673e7071f0c705322'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' 'c402eb816739c0f6fe737fb5c3c16860324b3cda0884ea95a2a7807ec1756f51'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '4bcf041ce47c1d1a37e2482a032e38452c5abaaf0b6e197ad24a1cca7ed11816'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '460a9dd84eea8203bfb434d1229d085cbe394172b42f6effe074cba6ecef9222'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '42e5a0233baf445b6772ebb39596cd3b069e389c9f37333762bccce8407ce8c6'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '2846ba9539ce1134bd8c9538b343dd99be823b688dc0f70926ed3f8d8120c254'

'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' 'b7543fa753136cf355ecc8b50c5de25c15a8ef0f9a6d6427c9d54a7963897401'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '1be1c2e12f9effd6a5fcd9c994e7d7b082811e54db4803fa6bfa15f78575d06c'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '0faef5812d37d188d5c223c7c9bb83bad6545dacf2fabb1a05b78681cbdbb981'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '3e12138868596d1e8418e2d7490dd02f9b229d570b9825e12d140fc3c7020a04'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '7b8370073312db2f18fd5b46f641baa58b9de7ff05b4fadbbe0f044cb5c9da84'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '40b2b90eaac2712ca877510398339883ad229cb84bd9bad10b863b4edfa930ff'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'dd7c9552410ad4ffd0a2e82236e172e7f55efcef5f7f9cadacfaf2b5fad15733'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'fc41b0daae91895c1fae7277a75856ab158e33f1164bad97d2aa3026a46b479e'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '41148fe714344d92a2e109c3a1a2f67c4a721e77cb162a130f50d6fc14ab8534'
'tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '12848622e27177e7927d9c6c142d4d3deda6cccb966c8c5cd8d66508a878927d'

'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '601a838f3103521339837412a550909a37910cf59111b1b66ec1657af4bbf3a9'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'b71d68b2417f204be7706a54e0a94e289f3f85dc292c08c16918e6be31238441'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '88b75ba29cd99f15dd4d027071cf550fb4fbb4240d1e25d3e486e1c732f07f76'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' 'af4f415640e36bfd89f3a78a71239c3f82494aa6352ea4383efd3b04aa16f8c7'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '9ac48ed21c1e71f1034a947b8cf489d6878f36286c27fa6dcd9600c3cc94509d'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '2463a3308f546e968fa4601ebdae2f0cf61fcaff885a0503b2233ff71553611d'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '514ec4adbcff86998bc2cd58d9a724b7a1ad845ccc6ecf076a5807c229505665'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'be363c02ab9a236e0c427844051c5f9b922e6a3a9fb71b1fb41038c13feb0b9c'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '8ff83c45c8e5a5bb3f6d1bbefce28c9cebb5dd6795a271db3750ac376f37e5a1'
'pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' 'c3798d964279e0429b37e09b576bdc302fd8bf2c5088857bdcb0e71787bb7f14'

'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '36815075d76d035b4dac1f8139de29b5a8657674369c71664e90c7ffc81b9cf1'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'cd120d7ec5ca7580e7d91fbd312663335e5fea0578d2fd6abb89253e34bce287'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'f0a843667b406301c1bb311d8d46530cee67dbd19234b6c79f02a2039854b230'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'e3607912159c274158ba0732b091d2b62aeecf18e1f41ca9c8ee7fba8772f0cf'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' 'bb00e4ceac79093eca76676290cfa0fc60a8adc5eb30b9ecfe479214ea98e067'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '820e255412faf18d39a11e46d3a5d54adb00165705ae14f5008caff3f568a8c1'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '4341884cc2128e70aef4e851a76bb5d8d6babe6da8239009d369311cf1e6b6ed'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '13bca42741e03c1d89abe90732fd41c5ef16c108d71b8b2dc41d29baf3c49f07'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '6bb24f1f85bc77a4b46575218837c4f538696d829c478ad0188fec1427b14e7d'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '05f55fd573c4c97a5b975ff361c275217b600bf553fcc3726fed7662ffa237d1'

'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' 'd6ff4ead033a9bba0b8e2bd653c2de0e2225bc61557ef6d7fa0ec236e121c53d'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '38430bf214db91670abefde8c95c3483c744dbc0649ed69765f630ae67ff8530'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'e8482df46c01ea00c30f131db61f6533c9e0ed5e5ffc45ed21f3e48208accb38'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '00bbe96cb821c99637d2b600b92eea0c1e12369b057234ab0eb1b51591b79062'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '92e822342ae97b8bcf566113f5099b6286608292f44c2a42eb18eca6b7095f4a'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'ae949fab75a7871b4c4de585988e17d37bf49fe79af67eac4754a8fbe94ebc48'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '6f2a04a68142877ef3d186dc92dbdf7d5110e6b158919c6d42324c598d3362c8'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '12ca4b5cdbb77259a79e3d4b8bb0ec65693692134ab7a2f53a2818edf873c9cd'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' 'e24f214d4383b30bbd06370e515120dc28495f1ffd21ff0e22430c7b0d835ae4'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '1744d51e12a74483d99b2a7eae368129b5c7c8cc290a8f3e7f3ed7cce6485e03'

'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '62a3bec17e3e9d384cba1e2d053c56b292636ed2c6d9a7c8c9985473b59647a9'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '9466ac36fc6d7a48576edee6f36805dbfe5dcb7d20b996adb1c82418f2fa8526'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'bf526d3d1d784cff05d7d8e3fcbcc398f9d5c34653d1b7dd4f85e3e03b6fbd14'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'a5bc98878e663c78a11add8a9a63d27c734799238b83f20e1898d5a402764dee'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '4feca003bd7b023d1e9b376d13bc53efeb0b8bd091fe04b540632d9ea91066f2'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '55c07a9c23e40300da2742329ffcabd353ce6bdb96ca456ae805c2094fa5c941'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '879d97790941f11a9cf12e54305929d286a5042d4343000e7ecc7ca82ab3ebe6'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'e2100ec5beec5cf7d9524ccabde13192041cadbbd06cad51ed6d88f445de5cb0'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '0ff965d35b2f5c3e8b298235fab318588b1d5f2abcf680cf845567fbc7202e70'
'tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/tas/v20130927/tas_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' 'a5789a040e042e50c980a2b76e0a02cdc8876b96ed056e8072f8fd5293c493b5'

'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '81cd9b421114fafdee9172a1957bee0d88aad7f0cb2ae767eed8dabda4f7822b'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '259cffb9dce990f874ec1eb32ae8a6170a98e3a515baf9e2b880022a5c43848f'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '1101d63042b24f52c4097c4755ea7bc6da8708fd4a8af4ed922f4293f1d49b1d'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '9f3cb7a3575b7148ff18b83cdd72afa07035d99e9e2f278e067e4ef26c5342cf'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '0161dc21e877bce0db7fcbb775b02c67a7008148f3d8fd60672878d1f6ff2f06'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'd43fb6928aad866ec8d085e33f70e6d6cf0a31c902ff57436e11fc39dcfa4b9e'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '9bf2f188771564b1e16549b0ab21256328be33de1412b46fe3a701d4a373ae31'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'aa148d38db4154d242c6ac4a7c6b7b7e376337432112d548df13759ca33dadda'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '39ff19039926e8cc0fee94422e14534a1d19daaa4a6b2d3012447090ccdc0d02'
'pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/AFR-44i/SMHI/CNRM-CERFACS-CNRM-CM5/rcp45/r1i1p1/SMHI-RCA4/v1/mon/pr/v20130927/pr_AFR-44i_CNRM-CERFACS-CNRM-CM5_rcp45_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '6ce54c4f5e7723a6be9001e9e5bcb0e67ec83ff0a16411a98823f007328d2ff9'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
TRUSTSTORE=$ESG_HOME/esg-truststore.ts
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            SHA256="sha256sum"
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            SHA256="shasum -a 256"
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

#get truststore from github
get_truststore() {
    # don't if this was already done today
    [[ -z $force && "$(find $TRUSTSTORE -type f -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Truststore..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg-truststore.ts -O $TRUSTSTORE -q ; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg-truststore.ts -O $TRUSTSTORE
        echo "Could't update truststore!" >&2
        return 1
    else
        touch $TRUSTSTORE
    fi
    
    echo "done!" >&2    
}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates
    #get truststore 
    get_truststore
    
    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -Djavax.net.ssl.trustStore=$TRUSTSTORE -Djavax.net.ssl.trustStorePassword=changeit -jar $MYPROXY_GETCERT $args --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$($SHA256 $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

get_mod_time_() {
    if ((LINUX)); then
        #on linux modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    elif ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 10 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
